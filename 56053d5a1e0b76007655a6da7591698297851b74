{
  "comments": [
    {
      "key": {
        "uuid": "9ab8dda7_01cd545d",
        "filename": "sfc/lib/utils.py",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 2091
      },
      "writtenOn": "2017-04-17T14:56:06Z",
      "side": 1,
      "message": "We are doing all the openstack calls using os_utils from functest: https://github.com/opnfv/functest/blob/master/functest/utils/openstack_utils.py. Unfortunately, that library does not include this glance API but it should not be difficult to create a patch in functest that adds it. I suggest to create a second patch in functest which adds that functionality. That way we continue doing openstack calls through functest and through openstack python libraries instead of doing it through cmd and thus we continue respecting the common practices. Besides, other projects can benefit from a more complete os_utils library.",
      "range": {
        "startLine": 663,
        "startChar": 11,
        "endLine": 663,
        "endChar": 28
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_21ff3869",
        "filename": "sfc/lib/utils.py",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 1331
      },
      "writtenOn": "2017-04-17T15:01:46Z",
      "side": 1,
      "message": "Agreed. Even I thought so but couldn\u0027t find a right openstack rest API for the same to code it. Hence this nasty approach. apologies. I will submit another patch in functest soon.",
      "parentUuid": "9ab8dda7_01cd545d",
      "range": {
        "startLine": 663,
        "startChar": 11,
        "endLine": 663,
        "endChar": 28
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_a73fbdd5",
        "filename": "sfc/tests/functest/sfc_one_chain_two_service_functions.py",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 2997
      },
      "writtenOn": "2017-04-13T16:04:47Z",
      "side": 1,
      "message": "I suggest checking the compute nodes instead.\nI know we don\u0027t have mixed arch pods yet, but ideally the arch of the target image should be aligned with the compute arch.",
      "range": {
        "startLine": 67,
        "startChar": 7,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_024c776f",
        "filename": "sfc/tests/functest/sfc_one_chain_two_service_functions.py",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1331
      },
      "writtenOn": "2017-04-13T16:53:27Z",
      "side": 1,
      "message": "Agreed",
      "parentUuid": "9ab8dda7_a73fbdd5",
      "range": {
        "startLine": 67,
        "startChar": 7,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_c7ef5186",
        "filename": "sfc/tests/functest/sfc_symmetric_chain.py",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5579
      },
      "writtenOn": "2017-04-13T14:06:13Z",
      "side": 1,
      "message": "same check in 2 places.",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 56
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_07824994",
        "filename": "sfc/tests/functest/sfc_symmetric_chain.py",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1331
      },
      "writtenOn": "2017-04-13T15:01:02Z",
      "side": 1,
      "message": "Yes. This is only for aarch64. Do you have any other idea of doing this?",
      "parentUuid": "9ab8dda7_c7ef5186",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 56
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_62d773c0",
        "filename": "sfc/tests/functest/sfc_symmetric_chain.py",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 6745
      },
      "writtenOn": "2017-04-14T08:08:34Z",
      "side": 1,
      "message": "Maybe you can use an extra function to replace the IFs.\nAlso you can create a function which will include the common functionality e.g \n\nfunction checkforarch{\n\n    if arch\u003d\u003d aarch64:\n      new functionality\n      function common_functionality\n      new functionality\n    \n    else: \n      function common_functionality \n\n}\n\nIMHO this way the code is cleaner and readable.\nThis is just a thought.",
      "parentUuid": "9ab8dda7_07824994",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 56
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_27e18d9a",
        "filename": "sfc/tests/functest/sfc_symmetric_chain.py",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 5579
      },
      "writtenOn": "2017-04-13T14:06:13Z",
      "side": 1,
      "message": "I would very much prefer if we had an aarch64 and an x86_64 image stored in artifacts and just download the appropriate one.\n\nIMHO this code is hard to understand and error prone.",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_477841c4",
        "filename": "sfc/tests/functest/sfc_symmetric_chain.py",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1331
      },
      "writtenOn": "2017-04-13T15:01:02Z",
      "side": 1,
      "message": "This code is just updating some of the properties of the image since this is required to spin up aarch64 VM\u0027s and it only does for aarch64 deployments like below\n\nglance image-update --property os_command_line\u003d\u0027root\u003dLABEL\u003dcloudimg-rootfs ro\u0027 $image_id\nglance image-update --property kernel_id\u003d$kernel_id $image_id\nglance image-update --property ramdisk_id\u003d$ramdisk_id $image_id",
      "parentUuid": "9ab8dda7_27e18d9a",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab8dda7_472601d0",
        "filename": "sfc/tests/functest/sfc_symmetric_chain.py",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 2997
      },
      "writtenOn": "2017-04-13T16:04:47Z",
      "side": 1,
      "message": "I agree with George, adding glance properties should be arch-agnostic, and AArch64 should just leverage the common mechanism, like we recently implemented for Functest/snaps.",
      "parentUuid": "9ab8dda7_477841c4",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "56053d5a1e0b76007655a6da7591698297851b74",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}