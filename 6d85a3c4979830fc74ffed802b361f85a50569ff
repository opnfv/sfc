{
  "comments": [
    {
      "key": {
        "uuid": "1acb0d3e_944f8592",
        "filename": "sfc/lib/utils.py",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1331
      },
      "writtenOn": "2017-02-03T18:42:03Z",
      "side": 1,
      "message": "This shouldn\u0027t return true if no match because on error of any command returns false. here ip route |grep -o cidr will return true if match and false if no match, even on empty output. Empty string is checked only after error condition checking.\n\nyou seeing any other behavior?\n\nif ignore_no_output is false then you will see other issues like there are many commanads which doesn\u0027t return any output but with true condition eg: touch \u003canyfine\u003e",
      "range": {
        "startLine": 394,
        "startChar": 0,
        "endLine": 394,
        "endChar": 76
      },
      "revId": "6d85a3c4979830fc74ffed802b361f85a50569ff",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_2ae8aa7b",
        "filename": "sfc/lib/utils.py",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 5579
      },
      "writtenOn": "2017-02-06T07:47:30Z",
      "side": 1,
      "message": "You can use execute_command from functest_utils, which returns the return code from the command it runs. Here\u0027s an example of the grep exit codes\n\n~/temp ? 9:13:17\n$ echo \"The bird is the word\" \u003e test \n\n~/temp ? 9:13:37\n$ cat test | grep bird\nThe bird is the word\n\n~/temp ? 9:13:43\n$ echo $?\n0\n\n~/temp ? 9:13:49\n$ cat test | grep cat\n\n~/temp ? 9:13:55\n$ echo $?\n1",
      "parentUuid": "1acb0d3e_944f8592",
      "range": {
        "startLine": 394,
        "startChar": 0,
        "endLine": 394,
        "endChar": 76
      },
      "revId": "6d85a3c4979830fc74ffed802b361f85a50569ff",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_a337e0af",
        "filename": "sfc/lib/utils.py",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 2091
      },
      "writtenOn": "2017-02-08T16:52:09Z",
      "side": 1,
      "message": "Sorry, I did it wrong. I meant to add ignore_no_output in the run_cmd_remote function when calling run_cmd. This is the problem:\n\nres \u003d True, re.M \u003d 8\nTraceback (most recent call last):\n  File \"sfc_two_chains_SSH_and_HTTP.py\", line 272, in \u003cmodule\u003e\n    main()\n  File \"sfc_two_chains_SSH_and_HTTP.py\", line 196, in main\n    if test_utils.is_ssh_blocked(srv_prv_ip, client_ip):\n  File \"/usr/local/lib/python2.7/dist-packages/sfc/lib/utils.py\", line 304, in is_ssh_blocked\n    match \u003d re.search(\"nc:.*timed out:.*\", res, re.M)\n  File \"/usr/lib/python2.7/re.py\", line 142, in search\n    return _compile(pattern, flags).search(string)\nTypeError: expected string or buffer\n\nTHe problem is that as the output is empty, the replied is True but that is wrong for the netcat function as it is doing a re.search.",
      "parentUuid": "1acb0d3e_944f8592",
      "range": {
        "startLine": 394,
        "startChar": 0,
        "endLine": 394,
        "endChar": 76
      },
      "revId": "6d85a3c4979830fc74ffed802b361f85a50569ff",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_e3ac088f",
        "filename": "sfc/lib/utils.py",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 2091
      },
      "writtenOn": "2017-02-08T16:52:09Z",
      "side": 1,
      "message": "OK. I will use that. I\u0027ll do that next week to check if the route 11.0.0.0 is added",
      "parentUuid": "1acb0d3e_2ae8aa7b",
      "range": {
        "startLine": 394,
        "startChar": 0,
        "endLine": 394,
        "endChar": 76
      },
      "revId": "6d85a3c4979830fc74ffed802b361f85a50569ff",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}